/* eslint-disable no-restricted-syntax */
import { basename, join } from 'path';
import { execSync } from 'child_process';
import { readdirSync, readFileSync, writeFileSync } from 'fs';
import config from '../config';
import { prefixWithAutoGeneratedMessage } from '../utils';

const {
    etcCategoryDirectoryPath,
    outputDirectoryPath,
    indexFilename,
    templates,
    etcCategoryImportPath,
    messages,
} = config;

const directoryName = basename(etcCategoryDirectoryPath);

const copyFolder = () => {
    execSync(`cp -r ${etcCategoryDirectoryPath} ${outputDirectoryPath}`);
};

const fixImportPaths = () => {
    const filesDirectoryPath = join(outputDirectoryPath, directoryName);
    const files = readdirSync(filesDirectoryPath);

    for (const file of files) {
        const filePath = join(filesDirectoryPath, file);
        let contents = readFileSync(filePath, 'utf8');

        contents = contents.replace(
            new RegExp(etcCategoryImportPath.searchValue, 'g'),
            etcCategoryImportPath.replaceValue,
        );

        writeFileSync(
            filePath,
            prefixWithAutoGeneratedMessage(contents),
            'utf-8',
        );
    }
};

const writeIndexFile = () => {
    const filepath = join(outputDirectoryPath, indexFilename);
    let contents = readFileSync(filepath, 'utf8');

    contents += templates.createExport(directoryName);

    writeFileSync(filepath, contents, 'utf-8');
};

function copyEtcCategory(): void {
    copyFolder();
    fixImportPaths();
    writeIndexFile();

    // eslint-disable-next-line no-console
    console.log(
        messages.copiedFromTo(
            join(etcCategoryDirectoryPath),
            join(outputDirectoryPath, directoryName),
        ),
    );
}

export default copyEtcCategory;
