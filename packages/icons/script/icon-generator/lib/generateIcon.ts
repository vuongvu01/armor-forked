/* eslint-disable no-restricted-syntax */
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import DomParser from 'dom-parser';
import { render } from 'ejs';
import config from '../config';
import { IconSize, SvgPathAttributes } from '../types';
import {
    capitalizeFirstLetter,
    prefixWithAutoGeneratedMessage,
} from '../utils';

const parser = new DomParser();

const { outputDirectoryPath, templates, messages } = config;

function generateIcon(category: string, name: string, icons: IconSize[]): void {
    const categoryPath = join(outputDirectoryPath, category);

    if (!existsSync(categoryPath)) {
        mkdirSync(categoryPath);
    }

    const sizes: Array<{ size: string; paths: SvgPathAttributes[] }> = [];

    for (const icon of icons) {
        const html = readFileSync(icon.path, 'utf8');
        const dom = parser.parseFromString(html);
        const nodes = dom.getElementsByTagName('path');
        const paths: Array<SvgPathAttributes> = [];

        if (!nodes?.length) {
            return;
        }

        for (const node of nodes) {
            const result: SvgPathAttributes = {};

            const d = node.getAttribute('d');
            const transform = node.getAttribute('transform');

            if (d) {
                result.d = d;
            }

            if (transform) {
                result.transform = transform;
            }

            if (!Object.keys(result).length) {
                return;
            }

            paths.push(result);
        }

        if (!paths.length) {
            return;
        }

        sizes.push({
            size: capitalizeFirstLetter(icon.size),
            paths,
        });
    }

    const content = render(templates.component, {
        name,
        sizes,
    });

    writeFileSync(
        join(outputDirectoryPath, category, `${name}.tsx`),
        prefixWithAutoGeneratedMessage(content),
    );

    const componentPath = join(outputDirectoryPath, category);

    // eslint-disable-next-line no-console
    console.log(messages.generatedComponent(componentPath, name));
}

export default generateIcon;
