/* eslint-disable no-restricted-syntax */
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import DomParser from 'dom-parser';
import { render } from 'ejs';
import config from '../config';
import { SvgPathAttributes, IllustrationSource } from '../types';
import { prefixWithAutoGeneratedMessage } from '../utils';

const parser = new DomParser();

const { outputDirectoryPath, templates, messages, constants } = config;

function generateIcon(
    category: string,
    name: string,
    source: IllustrationSource,
): void {
    const categoryPath = join(outputDirectoryPath, category);

    if (!existsSync(categoryPath)) {
        mkdirSync(categoryPath);
    }

    const html = readFileSync(source.path, 'utf8');
    const dom = parser.parseFromString(html);
    const nodes = dom.getElementsByTagName('path');
    const paths: Array<SvgPathAttributes> = [];

    if (!nodes?.length) {
        return;
    }

    for (const node of nodes) {
        const result: SvgPathAttributes = {};

        const d = node.getAttribute('d');
        const transform = node.getAttribute('transform');
        const fill = node.getAttribute('fill');

        if (d) {
            result.d = d;
        }

        if (transform) {
            result.transform = transform;
        }

        if (fill) {
            result.fill = fill;

            if (fill === constants.DEFAULT_BRAND_COLOR) {
                result.fill = `brandColor || "${fill}"`;
            }

            if (fill === constants.DEFAULT_NEUTRAL_COLOR) {
                result.fill = `neutralColor || "${fill}"`;
            }
        }

        if (!Object.keys(result).length) {
            return;
        }

        paths.push(result);
    }

    if (!paths.length) {
        return;
    }

    const content = render(templates.component, { name, paths });

    writeFileSync(
        join(outputDirectoryPath, category, `${name}.tsx`),
        prefixWithAutoGeneratedMessage(content),
    );

    const componentPath = join(outputDirectoryPath, category);

    // eslint-disable-next-line no-console
    console.log(messages.generatedComponent(componentPath, name));
}

export default generateIcon;
